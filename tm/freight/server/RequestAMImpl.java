package xxgam.oracle.apps.xbol.tm.freight.server;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Date;

import java.sql.Types;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.apps.fnd.framework.server.OADBTransactionImpl;

import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageStyledTextBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageTextInputBean;

import oracle.jbo.Row;

import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.BlobDomain;

import oracle.jbo.server.ViewLinkImpl;

import oracle.jdbc.OracleCallableStatement;

//import prakjumar.oracle.apps.fnd.fnduploaddemo.server.UploadFileVOImpl;
//import prakjumar.oracle.apps.fnd.fnduploaddemo.server.UploadFileVORowImpl;

import xxgam.oracle.apps.xbol.tm.freight.schema.RequestEOImpl;
import xxgam.oracle.apps.xbol.tm.freight.server.RequestVOImpl;
import xxgam.oracle.apps.xbol.tm.freight.server.RequestVORowImpl;
import xxgam.oracle.apps.xbol.tm.freight.webui.RequestCO;
//import xxgam.oracle.apps.xbol.tm.freight.server.MaterialDVOImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RequestAMImpl extends OAApplicationModuleImpl
{
  /**This is the default constructor (do not remove)
   */
  public RequestAMImpl()
  {
  }

  /**Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("xxgam.oracle.apps.xbol.tm.freight.server", /* package name */
      "RequestAMLocal" /* Configuration Name */);
  }


  public oracle.jbo.domain.Number Key;
  public String KeyFreight;
  public float Stretch=1;
  public float NM=1;
  public float TotalWeight=0;
  
  /*Request PG*/
  public void createRecord(String userId, String OperatingUnit)
  {
    System.out.println("Entrando a Metodo createRecord RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_1: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    RequestVOImpl vo = getRequestVO1();
    OADBTransaction oADBTransaction = this.getOADBTransaction();
    String userOrg=null;
    try {
         System.out.println("Realizando Consulta");
         vo.setWhereClause(null);
         System.out.println("search query - " + vo.getQuery());
         vo.executeQuery();
        }
     catch(Exception e) {
     throw new OAException(e.getMessage(),OAException.ERROR);
     }
                  
    oracle.jbo.domain.Number IdRequestNum = oADBTransaction.getSequenceValue("XXGAM_TM_REQUESTS_S");
    System.out.println("Id: "+IdRequestNum); 
    Key = IdRequestNum;
    if (!vo.isPreparedForExecution()) 
    { 
      vo.executeQuery(); 
    }
    
    Row row = vo.createRow();       
    vo.insertRow(row);
    vo.setCurrentRow(row);
    
    row.setAttribute("IdRequest",IdRequestNum);
    System.out.println("IdRequest: "+row.getAttribute("IdRequest"));
    
    DateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
    Date date = new Date();
    System.out.println(sdf.format(date));
    String s=(sdf.format(date));
    try
    {
      Date date2 = sdf.parse (s);
      java.sql.Date sqlDate = new java.sql.Date(date2.getTime());
      row.setAttribute("ActivationDate",sqlDate);
      row.setAttribute("IdStatus",1);
      row.setAttribute("Status","Abierto");
      //Inicia setteo relacionado con area
       RequestUserVOImpl voRU = getRequestUserVO1();
       OrgVOImpl voOrg = getOrgVO1();
       voOrg.setWhereClause("ORG_ID="+OperatingUnit);
       System.out.println("search query - " + voOrg.getQuery());
       System.out.println("Flag");
      RowSetIterator rowSetIteratorOrg = voOrg.createRowSetIterator(null);
      while (rowSetIteratorOrg.hasNext())
      {
        OrgVORowImpl OrgVORow = (OrgVORowImpl)rowSetIteratorOrg.next();
        System.out.println(OrgVORow.getOrg());
        userOrg=OrgVORow.getOrg();
        row.setAttribute("OperatingUnit",userOrg);
        row.setAttribute("OuDescription",OrgVORow.getOrgName());
      }
       System.out.println("userOrg="+userOrg);
       System.out.println("USER_ID="+userId);
       voRU.setWhereClause("USER_ID="+userId+" AND ORGANIZATION="+userOrg);
       System.out.println("search query - " + voRU.getQuery());
       voRU.executeQuery();
       RowSetIterator rowSetIteratorArea = voRU.createRowSetIterator(null);
       while (rowSetIteratorArea.hasNext())
       {
         RequestUserVORowImpl RequestUserVORow = (RequestUserVORowImpl)rowSetIteratorArea.next();
         System.out.println(RequestUserVORow.getName());
         row.setAttribute("UserName",RequestUserVORow.getName());
         row.setAttribute("ADescription",RequestUserVORow.getArea());
       }
      //Termina setteo de area
      RowSetIterator rowSetIterator = vo.createRowSetIterator(null);
      while (rowSetIterator.hasNext())
      {
        RequestVORowImpl RequestVORow = (RequestVORowImpl)rowSetIterator.next();
        RequestVORow.setFreightEnabled(false);
      }
    } catch (ParseException pe)
    {
       pe.printStackTrace();
    }
    System.out.println("ActivationDate: "+row.getAttribute("ActivationDate"));
    row.setNewRowState(Row.STATUS_NEW);
    //getOADBTransaction().postChanges();
    //vo.setWhereClause("ID_REQUEST="+row.getAttribute("IdRequest"));
    //System.out.println("search query - " + vo.getQuery());    
    //vo.executeQuery();
  }
  
     public void createRecord2()
     {
       System.out.println("Entrando a Metodo createRecord2 RequestAMImpl");
       System.out.println("Estatus de las variables globales: ");
       System.out.println("Key: "+Key);
       System.out.println("KeyFreight_2: "+KeyFreight);
       System.out.println("Stretch: "+Stretch);
       System.out.println("NM: "+NM);
       System.out.println("TotalWeight: "+TotalWeight);
       MaterialVOImpl voM = getMaterialVO1();
       OADBTransaction oADBTransaction = this.getOADBTransaction();
       if (!voM.isPreparedForExecution()) 
       { 
         voM.setWhereClause("ID_REQUEST="+Key);
         voM.executeQuery(); 
       }  
       System.out.println("Creando registro M");
       oracle.jbo.domain.Number IdMaterial = oADBTransaction.getSequenceValue("XXGAM_TM_MATERIAL_S");
       Row rowM = voM.createRow();       
       voM.insertRow(rowM);
       voM.setCurrentRow(rowM);   
       rowM.setAttribute("IdMaterial",IdMaterial);
       rowM.setAttribute("IdRequest",Key);
       rowM.setAttribute("MaterialNum",1);
       rowM.setAttribute("IsRecordEnabled", false);  //IsRecordEnabled
       System.out.println("IdRequest M: "+rowM.getAttribute("IdRequest"));
       rowM.setNewRowState(Row.STATUS_NEW);
       //getOADBTransaction().postChanges();
     }  
  
       public void createMaterial(OAPageContext pageContext, OAWebBean webBean)
        {
          System.out.println("Entrando a Metodo createMaterial RequestAMImpl");
          System.out.println("Estatus de las variables globales: ");
          System.out.println("Key: "+Key);
          System.out.println("KeyFreight_3: "+KeyFreight);
          System.out.println("Stretch: "+Stretch);
          System.out.println("NM: "+NM);
          System.out.println("TotalWeight: "+TotalWeight);
          System.out.println("pIdR: "+Key);
          NM = NM +1;
          int IdMat = 0;
          IdMat = (int)NM;
          System.out.println("pIdM: "+NM);
          MaterialVOImpl voM = getMaterialVO1();
          OADBTransaction oADBTransaction = this.getOADBTransaction();
          try {
               voM.setWhereClause("ID_REQUEST="+Key);
               System.out.println("search query - " + voM.getQuery());
               voM.executeQuery();
              }
           catch(Exception e) {
           throw new OAException(e.getMessage(),OAException.ERROR);
           }    
          Row rowM = voM.createRow();       
          voM.insertRow(rowM);
          voM.setCurrentRow(rowM);       
          oracle.jbo.domain.Number IdMaterialNum = oADBTransaction.getSequenceValue("XXGAM_TM_MATERIAL_S");
          rowM.setAttribute("IdMaterial",IdMaterialNum);
          rowM.setAttribute("IdRequest",Key);
          rowM.setAttribute("MaterialNum",NM);
          System.out.println("IdRequest M: "+rowM.getAttribute("IdRequest"));
          rowM.setNewRowState(Row.STATUS_NEW);
          //getOADBTransaction().commit();
          save(pageContext, webBean);
          voM.setWhereClause("ID_REQUEST="+Key); 
          voM.executeQuery();
          RowSetIterator rowSetIteratorMat = voM.createRowSetIterator(null);
          while(rowSetIteratorMat.hasNext())
          {
            MaterialVORowImpl MaterialVORow = (MaterialVORowImpl)rowSetIteratorMat.next();
            if(MaterialVORow.getIdMaterial().equals(IdMaterialNum))
              {
                System.out.println("Editar registro "+IdMaterialNum); 
                MaterialVORow.setIsRecordEnabled(false);
                MaterialVORow.setIsEditEnabled(true);
              }
            else
              {
                MaterialVORow.setIsRecordEnabled(true);
                MaterialVORow.setIsEditEnabled(false);
              }
          }
        }
  
  public Number saveFile(String Name)
  {
    System.out.println("Entrando a Metodo saveFile RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_4: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
    String strErrmsg;
    String strErrcod;
    Number retId;
    String retval;
    String strStmt =" BEGIN" +
                         " APPS.XXGAM_TM_FILES_PKG.GET_FILE( pso_errmsg  => :1" +
                         "                , pso_errcod  => :2" +
                         "                , pso_id  => :3" +
                         "                , psi_file_name   => :4" +
                         "                ); " +
                         " END; " ;
        
    OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement)oadbtransaction.createCallableStatement(strStmt, 1);
    try
    {
      oraclecallablestatement.registerOutParameter(1,Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(2,Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(3,Types.INTEGER);
      oraclecallablestatement.setString(4,new String(Name));                         
      oraclecallablestatement.execute();     
      strErrmsg = oraclecallablestatement.getString(1);
      strErrcod = oraclecallablestatement.getString(2);     
      retId = oraclecallablestatement.getInt(3);
      System.out.println("strErrmsg: "+strErrmsg);
      System.out.println("strErrcod: "+strErrcod);
      System.out.println("retId: "+retId);      
      return retId;
    } 
    catch (SQLException sqle)
    {
        retval = "EXCEPTION "+sqle.getErrorCode()+" , "+sqle.getMessage();
        throw new OAException(retval,OAException.ERROR); 
    }
    
  }
  
  public BlobDomain consultaBlob(String pIdT)
  {
    System.out.println("Entrando a Metodo consultaBlob RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_5: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    String FileName = null;
    BlobDomain BlobFile = null;
    int IdT = Integer.parseInt(pIdT);
    try
    {
      DownloadVOImpl vo = getDownloadVO1();
      vo.setMaxFetchSize(-1);
      vo.setWhereClauseParams(null);
      vo.setWhereClause("FILE_ID = "+IdT);
      System.out.println("search query - " + vo.getQuery());
      vo.executeQuery();
      DownloadVORowImpl row = (DownloadVORowImpl)vo.first(); 
      FileName = row.getFileName();
      BlobFile = row.getFileData();
      System.out.println("Blob File: "+BlobFile);
      return BlobFile;
    }
    catch(Exception e) 
    {
     throw new OAException(e.getMessage(),OAException.ERROR);
    }
  }
  
  public String consultaName(String pIdT)
  {
    System.out.println("Entrando a Metodo consultaName RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_6: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    String FileName = null;
    BlobDomain BlobFile = null;
    int IdT = Integer.parseInt(pIdT);
    try
    {
      DownloadVOImpl vo = getDownloadVO1();
      vo.setMaxFetchSize(-1);
      vo.setWhereClauseParams(null);
      vo.setWhereClause("FILE_ID = "+IdT);
      System.out.println("search query - " + vo.getQuery());
      vo.executeQuery();
      DownloadVORowImpl row = (DownloadVORowImpl)vo.first(); 
      FileName = row.getFileName();
      BlobFile = row.getFileData();
      System.out.println("Blob File: "+BlobFile);
      return FileName;
    }
    catch(Exception e) 
    {
     throw new OAException(e.getMessage(),OAException.ERROR);
    }
  }

  public void save(OAPageContext pageContext, OAWebBean webBean)
  {
    System.out.println("Entrando a Metodo save RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_7: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    MaterialVOImpl voM = getMaterialVO1();
    MaterialVORowImpl RowM = null;
    RequestVOImpl voR = getRequestVO1();
    RequestVORowImpl RowR = null;
    RowSetIterator rowSetIterator = voR.createRowSetIterator(null);
    while (rowSetIterator.hasNext())
    {
      RequestVORowImpl RequestVORow = (RequestVORowImpl)rowSetIterator.next();
      RequestVORow.setFreightEnabled(true);
    }
    OADBTransaction oADBTransaction = this.getOADBTransaction();
    getOADBTransaction().commit();
    voM.setWhereClause("ID_REQUEST="+Key);
    voM.executeQuery();
    voR.setWhereClause("ID_REQUEST="+Key);
    voR.executeQuery();
    oracle.jbo.domain.Number TW = new oracle.jbo.domain.Number(0);
    for(RowM=(MaterialVORowImpl)voM.first();null!=RowM;RowM=(MaterialVORowImpl)voM.next())
    {
      oracle.jbo.domain.Number TWR = new oracle.jbo.domain.Number(0);
      System.out.println(RowM.getMaterialNum());
      System.out.println(RowM.getWeight());
      System.out.println(RowM.getUnitsNumber());
      if (null!=RowM.getWeight() && null!=RowM.getUnitsNumber())
      {
        TWR = RowM.getWeight().multiply(RowM.getUnitsNumber());
        TW = TW.add(TWR);
      }
      System.out.println("Peso total "+RowM.getMaterialNum()+"= "+TWR);  
      System.out.println("Peso total ="+TW);
      RowM.setAttribute("TotalWeight", TWR);
      OAMessageStyledTextBean PT = (OAMessageStyledTextBean)webBean.findChildRecursive("TotalWeight");
      PT.setValue(pageContext,TW);
    }
    getOADBTransaction().commit();
    voM.setWhereClause("ID_REQUEST="+Key);
    voM.executeQuery();
    RowSetIterator rowSetIterator2 = voM.createRowSetIterator(null);
    while (rowSetIterator2.hasNext())
    {
      MaterialVORowImpl MaterialVORow = (MaterialVORowImpl)rowSetIterator2.next();
      System.out.println("Campos no editables");
      MaterialVORow.setIsRecordEnabled(true);
      MaterialVORow.setIsEditEnabled(false);
      System.out.println(MaterialVORow.getAttribute("MaterialNum"));
      voM.setCurrentRow(MaterialVORow);
    }
    voR.setWhereClause("ID_REQUEST="+Key);
    voR.executeQuery();
  }
  
  
  public void deleteRequest()
  {
    System.out.println("Entrando a Metodo deleteRequest RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_8: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    OADBTransaction oADBTransaction = this.getOADBTransaction();
    getOADBTransaction().rollback();
    RequestVOImpl voR = getRequestVO1();
    MaterialVOImpl voM = getMaterialVO1();
    Connection connection = oADBTransaction.getJdbcConnection();
    String strPrepStmt = " DELETE FROM BOLINF.XXGAM_TM_REQUESTS_T WHERE ID_REQUEST=?";  
    PreparedStatement prepStmt;
    String strPrepStmt2 = " DELETE FROM BOLINF.XXGAM_TM_MATERIAL_T WHERE ID_REQUEST=?";  
    PreparedStatement prepStmt2;
    try {
          prepStmt = connection.prepareStatement(strPrepStmt);
          String KeyStr = Key.toString();          
          prepStmt.setString(1, KeyStr);
          prepStmt.execute();
          System.out.println(strPrepStmt);
          oADBTransaction.commit();
          if(prepStmt!=null){
              prepStmt.close();
           }
          prepStmt2 = connection.prepareStatement(strPrepStmt2);
          prepStmt2.setString(1, KeyStr);
          prepStmt2.execute();
          System.out.println(strPrepStmt2);
          oADBTransaction.commit();
          if(prepStmt2!=null){
              prepStmt2.close();
           }
           throw new OAException("Se borra exitosamente el registro con id: "+Key,OAException.CONFIRMATION);
          } catch (SQLException e) {
               throw new OAException("No se registra cambio para registro con id: "+Key,OAException.ERROR);
          }
  }
  
  public void Editar(String pIdMaterial)
  {
    MaterialVOImpl voM = getMaterialVO1();
    RowSetIterator rowSetIteratorMat = voM.createRowSetIterator(null);
    while(rowSetIteratorMat.hasNext())
    {
      MaterialVORowImpl MaterialVORow = (MaterialVORowImpl)rowSetIteratorMat.next();
      if(MaterialVORow.getIdMaterial().equals(pIdMaterial))
        {
          System.out.println("Editar registro "+pIdMaterial); 
          MaterialVORow.setIsRecordEnabled(false);
          MaterialVORow.setIsEditEnabled(true);
        }
        else
        {
          MaterialVORow.setIsRecordEnabled(true);
          MaterialVORow.setIsEditEnabled(false);
        }
    }
  }

  /*End Request PG*/
  
  /*Freight PG*/
  
  public void iniFreightVO(String folio, oracle.jbo.domain.Number idRequest)
  {
    System.out.println("Entrando a Metodo iniFreightVO RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_9: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    FreightVOImpl vo = getFreightVO1();
    OADBTransaction oADBTransaction = this.getOADBTransaction();  
    oracle.jbo.domain.Number IdFreight = oADBTransaction.getSequenceValue("XXGAM_TM_FREIGHT_INFO_S");
    System.out.println("Freight: "+IdFreight); 
    try {
         System.out.println("Realizando Consulta");
         vo.setWhereClause("ID_FREIGHT="+IdFreight);
         System.out.println("search query - " + vo.getQuery());
         vo.executeQuery();
        }
     catch(Exception e) {
     throw new OAException(e.getMessage(),OAException.ERROR);
     }                  
    if (!vo.isPreparedForExecution()) 
    { 
      vo.setWhereClause("ID_FREIGHT="+IdFreight);
      vo.executeQuery(); 
    }
    Row row = vo.createRow();       
    vo.insertRow(row);
    vo.setCurrentRow(row);
    row.setAttribute("IdFreight",IdFreight);
    System.out.println("IdFreight: "+row.getAttribute("IdFreight"));
    row.setAttribute("IdRequest", idRequest);
    Key=idRequest;
    System.out.println("IdRequest: "+row.getAttribute("IdRequest"));
    row.setAttribute("IdFolio",folio);
    System.out.println("F1");
    //String Stretchaux = Float.toString(Stretch);
    String Stretchaux = String.format("%.0f", Stretch);
    System.out.println("F2 "+Stretchaux);
    System.out.println("00".substring(Stretchaux.length()));
    System.out.println("00".substring(Stretchaux.length())+Stretchaux);
    Stretchaux = "00".substring(Stretchaux.length())+Stretchaux;
    row.setAttribute("IdStretch", Stretchaux);
    System.out.println("F3 "+row.getAttribute("IdStretch"));
    row.setAttribute("IdFreightChar",folio.substring(0,2)+"-"+folio.substring(2,4)+
                     "-"+folio.substring(4,6)+"-"+folio.substring(6,10)+"-"+Stretchaux);
    System.out.println("F4 " +row.getAttribute("IdFreightChar"));
    row.setAttribute("IsRecordEnabled", false);
    row.setAttribute("IsEditEnabled", true);
    row.setNewRowState(Row.STATUS_NEW); 
  }
  
  public String obtainFolio(String userId, String operatingUnit)
  {
    System.out.println("Entrando a Metodo obtainFolio RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_10: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
     OADBTransaction oADBTransaction = this.getOADBTransaction(); 
     OperationUserVOImpl voOpUs = getOperationUserVO1();
     OrgVOImpl voOrg = getOrgVO1();
     String userOrg = null;
     String LoCode = null;
     String ACode = null;
     String folio = null;
     voOrg.setWhereClause("ORG_ID="+operatingUnit);
     System.out.println("search query - " + voOrg.getQuery());
     System.out.println("Flag");
    RowSetIterator rowSetIteratorOrg = voOrg.createRowSetIterator(null);
    while (rowSetIteratorOrg.hasNext())
    {
      OrgVORowImpl OrgVORow = (OrgVORowImpl)rowSetIteratorOrg.next();
      System.out.println(OrgVORow.getOrg());
      userOrg=OrgVORow.getOrg();
    }
     voOpUs.setWhereClause("USER_ID="+userId+" AND ORGANIZATION="+userOrg);
     System.out.println("search query - " + voOpUs.getQuery());
     voOpUs.executeQuery();
     RowSetIterator rowSetIteratorFolio = voOpUs.createRowSetIterator(null);
     while (rowSetIteratorFolio.hasNext())
     {
       OperationUserVORowImpl OperationUserVORow = (OperationUserVORowImpl)rowSetIteratorFolio.next();
       System.out.println(OperationUserVORow.getOrganization());
       System.out.println(OperationUserVORow.getLocationCode());
       LoCode = OperationUserVORow.getLocationCode();
       System.out.println(OperationUserVORow.getAreaCode());
       ACode = OperationUserVORow.getAreaCode();
       folio= userOrg+LoCode+ACode;
     }
     oracle.jbo.domain.Number folio_consc = oADBTransaction.getSequenceValue("XXGAM_TM_FOLIO_S");
     String foliaux = "0000".substring(folio_consc.toString().length())+folio_consc.toString();
     folio=folio+foliaux;
     KeyFreight = folio;
     return folio;
  }
  
  public void createStretch()
  {
    System.out.println("Entrando a Metodo createStretch RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_11: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    FreightVOImpl voFrg = getFreightVO1();
    OADBTransaction oADBTransaction = this.getOADBTransaction(); 
    System.out.println("Creacion de nuevo tramo");
    System.out.println("Folio Key: "+KeyFreight);
    Stretch = Stretch +1;
    int IdFrg = 0;
    IdFrg = (int)Stretch;
    FreightVOImpl voM = getFreightVO1();
    try {
         voFrg.setWhereClause("ID_FOLIO="+KeyFreight);
         System.out.println("search query - " + voFrg.getQuery());
         voFrg.executeQuery();
        }
     catch(Exception e) {
     throw new OAException(e.getMessage(),OAException.ERROR);
     }    
    Row rowFrg = voFrg.createRow();       
    voFrg.insertRow(rowFrg);
    voFrg.setCurrentRow(rowFrg);       
    oracle.jbo.domain.Number IdFreightNum = oADBTransaction.getSequenceValue("XXGAM_TM_FREIGHT_INFO_S");
    rowFrg.setAttribute("IdFreight",IdFreightNum);
    rowFrg.setAttribute("IdFolio",KeyFreight);
    rowFrg.setAttribute("IdRequest",Key);
    System.out.println("Stretch: "+Stretch);
    String Stretchaux = String.format("%.0f", Stretch);
    Stretchaux = "00".substring(Stretchaux.length())+Stretchaux;
    rowFrg.setAttribute("IdStretch", Stretchaux);
    rowFrg.setAttribute("IdFreightChar",KeyFreight.substring(0,2)+"-"+KeyFreight.substring(2,4)+
                     "-"+KeyFreight.substring(4,6)+"-"+KeyFreight.substring(6,10)+"-"+Stretchaux);
    rowFrg.setNewRowState(Row.STATUS_NEW);
    saveFreightPG();
    voFrg.setWhereClause("ID_FOLIO="+KeyFreight);
    voFrg.executeQuery();
    setReadOnlyFreightPG(IdFreightNum.toString());
  }
  
  public void saveFreightPG()
  {
    System.out.println("Entrando a Metodo saveFreightPG RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_12: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    setReadOnlyFreightPG("0");
    getOADBTransaction().commit();
  }
  
  public void setReadOnlyFreightPG(String IdFreight)
  {
    System.out.println("Entrando a Metodo setReadOnlyFreightPG RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_13: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    FreightVOImpl voFrg = getFreightVO1();
    System.out.println("IdFreight modificable="+IdFreight);
    RowSetIterator rowSetIteratorFrg = voFrg.createRowSetIterator(null);
    while(rowSetIteratorFrg.hasNext())
    {
      FreightVORowImpl FreightVORow = (FreightVORowImpl)rowSetIteratorFrg.next();
      System.out.println(FreightVORow.getIdFreight().toString()+" equals "+IdFreight);
      if(FreightVORow.getIdFreight().toString().equals(IdFreight))
        {
          System.out.println("Yes");
          FreightVORow.setIsRecordEnabled(false);
          FreightVORow.setIsEditEnabled(true);
        }
      else
        {
          FreightVORow.setIsRecordEnabled(true);
          FreightVORow.setIsEditEnabled(false);
        }
    }
  }
  
  /*End Freight PG*/
  
  /*Material Page*/
  
  public void iniMat(String pIdRequest, String pIdFreight, String pIdStretch, String pIdFolio)
  {
    System.out.println("Entrando a Metodo iniMat RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_14: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    System.out.println("pIdRequest "+pIdRequest);
    System.out.println("pIdFreight "+pIdFreight);
    System.out.println("pIdStretch "+pIdStretch);
    System.out.println("pIdFolio "+pIdFolio);
    MaterialVOImpl voM = getMaterialVO1();
    OADBTransaction oADBTransaction = this.getOADBTransaction();
    if(pIdStretch.equals("1")) //Primer tramo
    {
      System.out.println("Flag1");
      if(pIdRequest.equals("0")) //Sin solicitud
      {
        System.out.println("Flag2");
        voM.setWhereClause("ID_FREIGHT="+pIdFreight);
        System.out.println("search query - " + voM.getQuery());
        voM.executeQuery(); 
        RowSetIterator rowSetIteratorMat = voM.createRowSetIterator(null);
        if (!rowSetIteratorMat.hasNext()) //Sin materiales registrados al momento
          {
            System.out.println("Flag3");
            System.out.println("Caso1");
            System.out.println("Sin registros");
            oracle.jbo.domain.Number IdMaterial = oADBTransaction.getSequenceValue("XXGAM_TM_MATERIAL_S");
            Row rowM = voM.createRow();       
            voM.insertRow(rowM);
            voM.setCurrentRow(rowM);
            rowM.setAttribute("IdMaterial",IdMaterial);
            rowM.setAttribute("IdRequest",pIdRequest);
            rowM.setAttribute("IdFreight",pIdFreight);
            rowM.setAttribute("MaterialNum",1);
            rowM.setAttribute("IsRecordEnabled",false);
            rowM.setAttribute("IsEditEnabled",true);
            rowM.setNewRowState(Row.STATUS_NEW);
          }
        else //Con materiales registrados
          {
            System.out.println("Caso2");
            System.out.println("Con registros");
            setReadOnlyMaterialPG("0");
          }
      }
      else  //Con solicitud
      {
        voM.setWhereClause("ID_REQUEST="+pIdRequest);
        voM.executeQuery();
        RowSetIterator rowSetIteratorMat = voM.createRowSetIterator(null);
        if (!rowSetIteratorMat.hasNext()) //Sin materiales registrados al momento
          {
            System.out.println("Caso3");
            System.out.println("Sin registros");
            oracle.jbo.domain.Number IdMaterial = oADBTransaction.getSequenceValue("XXGAM_TM_MATERIAL_S");
            Row rowM = voM.createRow();       
            voM.insertRow(rowM);
            voM.setCurrentRow(rowM);
            rowM.setAttribute("IdMaterial",IdMaterial);
            rowM.setAttribute("IdRequest",pIdRequest);
            rowM.setAttribute("IdFreight",pIdFreight);
            rowM.setAttribute("MaterialNum",1);
            rowM.setAttribute("IsRecordEnabled",false);
            rowM.setAttribute("IsEditEnabled",true);
            rowM.setNewRowState(Row.STATUS_NEW);
          }
        else //Con materiales registrados
          {
            System.out.println("Caso4");
            System.out.println("Con registros");
            while (rowSetIteratorMat.hasNext())
            {
              MaterialVORowImpl MaterialVORow = (MaterialVORowImpl)rowSetIteratorMat.next();
              MaterialVORow.setAttribute("IdFreight", pIdFreight);
            }
            setReadOnlyMaterialPG("0");
          }
      }
    }   
    else    //no es el primer tramo
    {
      voM.setWhereClause("ID_FREIGHT="+pIdFreight);
      System.out.println("search query - " + voM.getQuery());
      voM.executeQuery(); 
      RowSetIterator rowSetIteratorMat = voM.createRowSetIterator(null);
      if (!rowSetIteratorMat.hasNext()) //Sin materiales registrados al momento
      {
        System.out.println("Caso5");
        OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
        String strErrmsg;
        String strErrcod;
        String retval;
        String strStmt =" BEGIN" +
                             " APPS.XXGAM_TM_MATERIAL_PKG.COVARMAT( pso_errmsg  => :1" +
                             "                , pso_errcod  => :2" +
                             "                , pni_Freight  => :3" +
                             "                , pni_Request   => :4" +
                             "                , pni_Folio   => :5" +
                             "                , pni_Stretch   => :6" +
                             "                ); " +
                             " END; " ;
            
        OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement)oadbtransaction.createCallableStatement(strStmt, 1);
        try
        {
          oraclecallablestatement.registerOutParameter(1,Types.VARCHAR);
          oraclecallablestatement.registerOutParameter(2,Types.VARCHAR);
          System.out.println("PROCEDURE pIdFreight="+pIdFreight);
          oraclecallablestatement.setString(3,new String(pIdFreight));  
          System.out.println("PROCEDURE pIdRequest="+pIdRequest);
          oraclecallablestatement.setString(4,new String(pIdRequest));
          System.out.println("PROCEDURE pIdFolio="+pIdFolio);
          oraclecallablestatement.setString(5,new String(pIdFolio));
          System.out.println("PROCEDURE pIdStretch="+pIdStretch);
          oraclecallablestatement.setString(6,new String(pIdStretch));
          oraclecallablestatement.execute();     
          strErrmsg = oraclecallablestatement.getString(1);
          strErrcod = oraclecallablestatement.getString(2);     
          System.out.println("strErrmsg: "+strErrmsg);
          System.out.println("strErrcod: "+strErrcod);
        } 
        catch (SQLException sqle)
        {
            retval = "EXCEPTION "+sqle.getErrorCode()+" , "+sqle.getMessage();
            throw new OAException(retval,OAException.ERROR); 
        }
        voM.setWhereClause("ID_FREIGHT="+pIdFreight);
        voM.executeQuery();
        setReadOnlyMaterialPG("0");
      }
      else //Con materiales registrados
        {
          System.out.println("Caso6");
          System.out.println("Con registros");
          setReadOnlyMaterialPG("0");
        }
    }
  }
  
  public void NewMaterialPG(OAPageContext pageContext, OAWebBean webBean)
   {
     System.out.println("Entrando a Metodo NewMaterialPG RequestAMImpl");
     System.out.println("Estatus de las variables globales: ");
     System.out.println("Key: "+Key);
     System.out.println("KeyFreight_15: "+KeyFreight);
     System.out.println("Stretch: "+Stretch);
     System.out.println("NM: "+NM);
     System.out.println("TotalWeight: "+TotalWeight);
     NM = 0;
     MaterialVOImpl voM = getMaterialVO1();
     String IdRequest = null;
     String IdFreight = null;
     RowSetIterator rowSetIteratorMat = voM.createRowSetIterator(null);
     System.out.println("Flag1");
     while(rowSetIteratorMat.hasNext())
     {
       System.out.println("Flag2");
       MaterialVORowImpl MaterialVORow = (MaterialVORowImpl)rowSetIteratorMat.next();
       System.out.println("Flag3");
       String MaterialNum = MaterialVORow.getAttribute("MaterialNum").toString();
       System.out.println("Flag4");
       IdFreight = MaterialVORow.getAttribute("IdFreight").toString();
       System.out.println("Flag5");
       IdRequest = MaterialVORow.getAttribute("IdRequest").toString();
       if(NM<Float.valueOf(MaterialNum))
       {
        NM=Float.valueOf(MaterialNum);
        System.out.println("NM ="+NM);
       }
     }
     OADBTransaction oADBTransaction = this.getOADBTransaction();
     /*try {
          voM.setWhereClause("ID_REQUEST="+Key);
          System.out.println("search query - " + voM.getQuery());
          voM.executeQuery();
         }
      catch(Exception e) {
      throw new OAException(e.getMessage(),OAException.ERROR);
      }*/    
     Row rowM = voM.createRow();       
     voM.insertRow(rowM);
     voM.setCurrentRow(rowM);       
     oracle.jbo.domain.Number IdMaterialNum = oADBTransaction.getSequenceValue("XXGAM_TM_MATERIAL_S");
     rowM.setAttribute("IdFreight",IdFreight);
     rowM.setAttribute("IdMaterial",IdMaterialNum);
     rowM.setAttribute("IdRequest",IdRequest);
     rowM.setAttribute("MaterialNum",NM+1);
     rowM.setNewRowState(Row.STATUS_NEW);
     saveMaterialPG(pageContext, webBean);
     voM.setWhereClause("ID_FREIGHT="+IdFreight);
     voM.executeQuery();
     setReadOnlyMaterialPG(IdMaterialNum.toString());
     //getOADBTransaction().postChanges();
   }
   
      public void saveMaterialPG(OAPageContext pageContext, OAWebBean webBean)
      {
        System.out.println("Entrando a Metodo saveMaterialPG RequestAMImpl");
        System.out.println("Estatus de las variables globales: ");
        System.out.println("Key: "+Key);
        System.out.println("KeyFreight_16: "+KeyFreight);
        System.out.println("Stretch: "+Stretch);
        System.out.println("NM: "+NM);
        System.out.println("TotalWeight: "+TotalWeight);
        MaterialVOImpl voM = getMaterialVO1();
        MaterialVORowImpl RowM = null;
        OADBTransaction oADBTransaction = this.getOADBTransaction();
        getOADBTransaction().commit();
        oracle.jbo.domain.Number TW = new oracle.jbo.domain.Number(0);
        for(RowM=(MaterialVORowImpl)voM.first();null!=RowM;RowM=(MaterialVORowImpl)voM.next())
        {
          oracle.jbo.domain.Number TWR = new oracle.jbo.domain.Number(0);
          System.out.println(RowM.getMaterialNum());
          System.out.println(RowM.getWeight());
          System.out.println(RowM.getUnitsNumber());
          if (null!=RowM.getWeight() && null!=RowM.getUnitsNumber())
          {
            TWR = RowM.getWeight().multiply(RowM.getUnitsNumber());
            TW = TW.add(TWR);
          }
          System.out.println("Peso total "+RowM.getMaterialNum()+"= "+TWR);  
          System.out.println("Peso total ="+TW);
          RowM.setAttribute("TotalWeight", TWR);
          OAMessageStyledTextBean PT = (OAMessageStyledTextBean)webBean.findChildRecursive("TotalWeight");
          PT.setValue(pageContext,TW);
        }
        getOADBTransaction().commit();
        RowSetIterator rowSetIterator2 = voM.createRowSetIterator(null);
        while (rowSetIterator2.hasNext())
        {
          MaterialVORowImpl MaterialVORow = (MaterialVORowImpl)rowSetIterator2.next();
          voM.setCurrentRow(MaterialVORow);
        }
        setReadOnlyMaterialPG("0");
      }
  
  public void setReadOnlyMaterialPG(String IdMaterial)
  {
    System.out.println("Entrando a Metodo setReadOnlyMaterialPG RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_17: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    System.out.println("IdMaterial modificable="+IdMaterial);
    MaterialVOImpl voMat = getMaterialVO1();
    RowSetIterator rowSetIteratorMat = voMat.createRowSetIterator(null);
    while(rowSetIteratorMat.hasNext())
    {
      MaterialVORowImpl MaterialVORow = (MaterialVORowImpl)rowSetIteratorMat.next();
      System.out.println(MaterialVORow.getIdMaterial().toString()+" equals "+IdMaterial);
      if(MaterialVORow.getIdMaterial().toString().equals(IdMaterial))
        {
          System.out.println("Yes");
          MaterialVORow.setIsRecordEnabled(false);
          MaterialVORow.setIsEditEnabled(true);
        }
      else
        {
          MaterialVORow.setIsRecordEnabled(true);
          MaterialVORow.setIsEditEnabled(false);
        }
    }
  }
  
  /*End Material PG*/
  
  /*FreightQuery PG*/
  
  public void RequestQuery(String IdRequest, String IdStatus, String IdPriority)
  {
    System.out.println("Entrando a Metodo RequestQuery RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_18: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    RequestVOImpl voR = getRequestVO1();
    String queryStmt = "1=1";
    if(IdRequest!=null && IdRequest!="0")
    {
      System.out.println("IdRequest not null");
      queryStmt = queryStmt + " AND ID_REQUEST="+IdRequest;
    }
    if(IdStatus!=null && IdStatus!="0")
    {
      System.out.println("IdStatus not null");
      queryStmt = queryStmt + " AND ID_STATUS="+IdStatus;
    }
    if(IdPriority!=null && IdPriority!="0")
    {
      System.out.println("IdPriority not null");
      queryStmt = queryStmt + " AND ID_PRIORITY="+IdPriority;
    }
    try {
         System.out.println("Realizando Consulta");
         voR.setWhereClause(queryStmt);
         System.out.println("search query - " + voR.getQuery());
         voR.executeQuery();
        }
     catch(Exception e) {
     throw new OAException(e.getMessage(),OAException.ERROR);
     }
  }
  
  public void FreightQuery(String IdFreightChar
                         , String IdStatusF
                         , String PriorityCodeF
                         //, String CreationDate
                         //, String NumberQ
                         , String JobQ)
  {
    System.out.println("Entrando a Metodo FreightQuery RequestAMImpl");
    System.out.println("Estatus de las variables globales: ");
    System.out.println("Key: "+Key);
    System.out.println("KeyFreight_19: "+KeyFreight);
    System.out.println("Stretch: "+Stretch);
    System.out.println("NM: "+NM);
    System.out.println("TotalWeight: "+TotalWeight);
    FreightVOImpl voFrg = getFreightVO1();
    String queryStmt = "1=1";
    if(IdFreightChar!=null && IdFreightChar!="0")
    {
      System.out.println("IdFreightChar not null");
      queryStmt = queryStmt + " AND ID_FREIGHT_CHAR="+IdFreightChar;
    }
    if(IdStatusF!=null && IdStatusF!="0")
    {
      System.out.println("IdStatus not null");
      queryStmt = queryStmt + " AND ID_STATUS="+IdStatusF;
    }
    if(PriorityCodeF!=null && PriorityCodeF!="0")
    {
      System.out.println("PriorityCodeF not null");
      queryStmt = queryStmt + " AND PRIORITY_CODE="+PriorityCodeF;
    }
    /*Date Dataux = new Date();
    if(CreationDate!=null && CreationDate!=Dataux.toString()) 
    {
      System.out.println("CreationDate not null");
      queryStmt = queryStmt + " AND CREATION_DATE="+CreationDate;
    }
    /*if(NumberQ!=null && NumberQ!="0")
    {
      System.out.println("NumberQ not null");
      queryStmt = queryStmt + " AND ID_STATUS="+NumberQ;
    }*/
    if(JobQ!=null && JobQ!="0")
    {
      System.out.println("JobQ not null");
      queryStmt = queryStmt + " AND FREIGHT_JOB="+JobQ;
    }
    try {
         System.out.println("Realizando Consulta");
         voFrg.setWhereClause(queryStmt);
         System.out.println("search query - " + voFrg.getQuery());
         voFrg.executeQuery();
        }
     catch(Exception e) {
     throw new OAException(e.getMessage(),OAException.ERROR);
     }
  }
  
  
  /*End FreightQuery PG*/

  /**Container's getter for DownloadVO1
   */
  public DownloadVOImpl getDownloadVO1()
  {
    return (DownloadVOImpl)findViewObject("DownloadVO1");
  }


  /**Container's getter for RequestVO1
   */
  public RequestVOImpl getRequestVO1()
  {
    return (RequestVOImpl)findViewObject("RequestVO1");
  }

  /**Container's getter for RequestUserVO1
   */
  public RequestUserVOImpl getRequestUserVO1()
  {
    return (RequestUserVOImpl)findViewObject("RequestUserVO1");
  }

  /**Container's getter for MaterialVO1
   */
  public MaterialVOImpl getMaterialVO1()
  {
    return (MaterialVOImpl)findViewObject("MaterialVO1");
  }

  /**Container's getter for FreightVO1
   */
  public FreightVOImpl getFreightVO1()
  {
    return (FreightVOImpl)findViewObject("FreightVO1");
  }

  /**Container's getter for OrgVO1
   */
  public OrgVOImpl getOrgVO1()
  {
    return (OrgVOImpl)findViewObject("OrgVO1");
  }

  /**Container's getter for OperationUserVO1
   */
  public OperationUserVOImpl getOperationUserVO1()
  {
    return (OperationUserVOImpl)findViewObject("OperationUserVO1");
  }
}

